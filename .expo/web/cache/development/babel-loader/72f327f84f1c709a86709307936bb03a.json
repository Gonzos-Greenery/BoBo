{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport useKeyboardManager from \"../../utils/useKeyboardManager\";\nimport Card from \"./Card\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n      index = _ref.index,\n      active = _ref.active,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      modal = _ref.modal,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerDarkContent = _ref.headerDarkContent,\n      hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      isNextScreenTransparent = _ref.isNextScreenTransparent,\n      detachCurrentScreen = _ref.detachCurrentScreen,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  var _useKeyboardManager = useKeyboardManager(React.useCallback(function () {\n    var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor])),\n      onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n      onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n      onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n      presentation = _scene$descriptor$opt.presentation,\n      animationEnabled = _scene$descriptor$opt.animationEnabled,\n      cardOverlay = _scene$descriptor$opt.cardOverlay,\n      cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n      cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n      cardStyle = _scene$descriptor$opt.cardStyle,\n      cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n      gestureDirection = _scene$descriptor$opt.gestureDirection,\n      gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n      gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n      gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n      headerMode = _scene$descriptor$opt.headerMode,\n      headerShown = _scene$descriptor$opt.headerShown,\n      transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","scene","parentHeaderHeight","React","onPageChangeConfirm","useKeyboardManager","navigation","options","handleOpen","route","onTransitionEnd","onOpenRoute","handleClose","onCloseRoute","handleGestureBegin","onPageChangeStart","onGestureStart","handleGestureCanceled","onPageChangeCancel","onGestureCancel","handleGestureEnd","onGestureEnd","handleTransition","gesture","active","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","listener","value","setPointerEvents","transitionSpec","previousScene","getPreviousScene","backTitle","getHeaderTitle","headerBack","title","index","focused","headerMode","presentation","marginTop","headerHeight","backgroundColor","background","overflow","display","animationEnabled","isNextScreenTransparent","detachCurrentScreen","StyleSheet","styles","container","modal","isParentHeaderShown","headerShown","renderScene","renderHeader","mode","layout","scenes","getFocusedRoute","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}