{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\n\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n        _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n        headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n        headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      presentation = _ref4.presentation,\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n          height = _ref.height;\n\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          isParentModal = _this$props.isParentModal,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n            headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n\n        return false;\n      });\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n            detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n          return scene.descriptor.options.cardStyleInterpolator;\n        }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n            _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n            headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n            headerTransparent = _scene$descriptor$opt2.headerTransparent,\n            headerStyle = _scene$descriptor$opt2.headerStyle,\n            headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref5.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n            animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n            _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n            gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n            _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n            gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n            _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n            transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n            _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n            cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n            _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n            headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n            _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n            cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getInterpolationIndex","cardStyleInterpolator","scenes","interpolationIndex","i","index","cardStyleInterpolatorCurrent","getIsModal","scene","isModalPresentation","getIsModalPresentation","isModal","getHeaderHeights","headerStatusBarHeight","isParentHeaderShown","insets","headerStyle","curr","style","StyleSheet","height","previous","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","presentation","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","getDerivedStateFromProps","props","state","gestures","descriptor","animationEnabled","Animated","previousRoute","self","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","Platform","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","progress","current","next","undefined","__memo","routes","descriptors","headerHeights","constructor","SafeAreaProviderCompat","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","headerShown","headerTransparent","activeScreensLimit","detachPreviousScreen","floatingHeader","renderHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","headerDarkContent","Color","flattenedHeaderStyle","isNextScreenTransparent","detachCurrentScreen","closingRouteKeys","container","flex","absolute","position","top","left","right","floating","zIndex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,EAAA,sBAAA,EAAA,sBAAA,QAAA,4BAAA;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AASA,SAAA,uBAAA,EAEEA,cAAc,IAFhB,kBAAA;AAIA,SAAA,iBAAA,EAAA,mBAAA,EAAA,eAAA;AAaA,OAAA,uBAAA;AAEA,SAAA,WAAA,EAAA,oBAAA;AACA,SAAA,sBAAA;AACA,OAAA,aAAA;AA0CA,IAAMC,OAAO,GAAb,IAAA;AAEA,IAAMC,cAAc,GAApB,CAAA;AACA,IAAMC,gCAAgC,GAAtC,CAAA;AACA,IAAMC,YAAY,GAAlB,CAAA;AAEA,IAAMC,mBAAmB,GAAG,MAAM,CAAN,MAAA,CAAc;EAAEC,OAAO,EAAE;AAAX,CAAd,CAA5B;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,MAAA,EAAA,KAAA,EAAoC;EAChE,IAAQC,qBAAR,GAAkCC,MAAM,CAANA,KAAM,CAANA,CAAAA,UAAAA,CAD8B,OAChE,CAAQD,qBAAR;EAGA,IAAIE,kBAAkB,GAAtB,CAAA;;EAEA,KAAK,IAAIC,CAAC,GAAGC,KAAK,GAAlB,CAAA,EAAwBD,CAAC,IAAzB,CAAA,EAAgCA,CAAhC,EAAA,EAAqC;IAAA,IAAA,SAAA;;IACnC,IAAME,4BAA4B,GAAA,CAAA,SAAA,GAChCJ,MAAM,CAD0B,CAC1B,CAD0B,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAChCA,SAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CADF,qBAAA;;IAGA,IAAII,4BAA4B,KAAhC,qBAAA,EAA4D;MAC1D;IACD;;IAEDH,kBAAkB;EACnB;;EAED,OAAA,kBAAA;AAjBF,CAAA;;AAoBA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA,kBAAA,EAAA,aAAA,EAId;EACH,IAAA,aAAA,EAAmB;IACjB,OAAA,IAAA;EACD;;EAED,IAAQN,qBAAR,GAAkCO,KAAK,CAALA,UAAAA,CAAlC,OAAA,CAAQP,qBAAR;EACA,IAAMQ,mBAAmB,GAAGC,sBAAsB,CAAlD,qBAAkD,CAAlD;EACA,IAAMC,OAAO,GAAGF,mBAAmB,IAAIN,kBAAkB,KAAzD,CAAA;EAEA,OAAA,OAAA;AAbF,CAAA;;AAgBA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,MAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,aAAA,EAAA,MAAA,EAAA,QAAA,EAOpB;EACH,OAAO,MAAM,CAAN,MAAA,CAAsC,UAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAsB;IACjE,4BAGIK,IAAI,CAAJA,UAAAA,CAHJ,OAAA;IAAA,mDACEJ,qBADF;IAAA,IACEA,qBADF,uCAC0BC,mBAAmB,GAAA,CAAA,GAAOC,MAAM,CADpD,GAAN;IAAA,IAEEC,WAFF,yBAEEA,WAFF;IAKA,IAAME,KAAK,GAAGC,UAAU,CAAVA,OAAAA,CAAmBH,WAAW,IAA5C,EAAcG,CAAd;IAEA,IAAMC,MAAM,GACV,YAAA,KAAA,IAAqB,OAAOF,KAAK,CAAZ,MAAA,KAArB,QAAA,GACIA,KAAK,CADT,MAAA,GAEIG,QAAQ,CAACJ,IAAI,CAAJA,KAAAA,CAHf,GAGc,CAHd;IAKA,IAAMd,kBAAkB,GAAGH,qBAAqB,CAAA,MAAA,EAAhD,KAAgD,CAAhD;IACA,IAAMW,OAAO,GAAGJ,UAAU,CAAA,IAAA,EAAA,kBAAA,EAA1B,aAA0B,CAA1B;IAEAe,GAAG,CAACL,IAAI,CAAJA,KAAAA,CAAJK,GAAG,CAAHA,GACE,OAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAEIC,sBAAsB,CAAA,MAAA,EAAA,OAAA,EAH5BD,qBAG4B,CAH5BA;IAKA,OAAA,GAAA;EArBK,CAAA,EAAP,EAAO,CAAP;AARF,CAAA;;AAiCA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,MAAA,EAAA,UAAA,EAG1B;EACH,YAKK,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,OAAA,KALL,EAAA;EAAA,IAAM,YAAN,SAAM,YAAN;EAAA,kCAEEC,gBAFF;EAAA,IAEEA,gBAFF,sCAEqBC,YAAY,KAAZA,OAAAA,GACfC,eAAe,CADAD,gBAAAA,GAEfE,iBAAiB,CAACH,gBAJxB;;EAOA,OAAOI,uBAAuB,CAAA,MAAA,EAA9B,gBAA8B,CAA9B;AAXF,CAAA;;AAcA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAI1B;EACH,IAAMC,QAAQ,GAAGP,sBAAsB,CACrC;IAGEQ,KAAK,EAAEC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,MAAM,CAH3B,KAGSD,CAHT;IAIEb,MAAM,EAAEa,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,MAAM,CAAlBD,MAAAA;EAJV,CADqC,EAAvC,UAAuC,CAAvC;;EAUA,IAAIF,QAAQ,GAAZ,CAAA,EAAkB;IAChB,OAAO,OAAO,CAAP,WAAA,CAAoB;MACzBI,UAAU,EAAE,CAAA,CAAA,EADa,QACb,CADa;MAEzBC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;IAFY,CAApB,CAAP;EAID;;EAED,OAAO,OAAO,CAAP,WAAA,CAAoB;IACzBD,UAAU,EAAE,CAAA,QAAA,EADa,CACb,CADa;IAEzBC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;EAFY,CAApB,CAAP;AAtBF,CAAA;;IA4Be,S;;;;;EAqLbmC,mBAAW,MAAXA,EAA0B;IAAA;;IAAA;;IACxB,0BAAA,MAAA;;IADwB,eAAA,gCAAA,cAAA,EAkBFE,UAAAA,CAAD,EAA0B;MAC/C,4BAA0BA,CAAC,CAADA,WAAAA,CAA1B,MAAA;MAAA,IAAM,MAAN,yBAAM,MAAN;MAAA,IAAgBzC,KAAhB,yBAAgBA,KAAhB;MAEA,IAAME,MAAM,GAAG;QAAEF,KAAF,EAAEA,KAAF;QAASZ,MAAAA,EAAAA;MAAT,CAAf;;MAEA,MAAA,QAAA,CAAc,UAAA,KAAA,EAAA,KAAA,EAAkB;QAC9B,IAAIA,MAAM,KAAKoB,KAAK,CAALA,MAAAA,CAAXpB,MAAAA,IAAkCY,KAAK,KAAKQ,KAAK,CAALA,MAAAA,CAAhD,KAAA,EAAoE;UAClE,OAAA,IAAA;QACD;;QAED,OAAO;UACLN,MADK,EACLA,MADK;UAELoC,aAAa,EAAE1D,gBAAgB,CAC7B4B,KAAK,CADwB,MAAA,EAE7BD,KAAK,CAFwB,MAAA,EAG7BA,KAAK,CAHwB,mBAAA,EAI7BA,KAAK,CAJwB,aAAA,EAAA,MAAA,EAM7BC,KAAK,CANwB,aAAA;QAF1B,CAAP;MALF,CAAA;IAvBwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,oBAAA,EA0CG,UAAA,IAAA,EAMvB;MANwB,IAAA,KAAA,GAMxB,IANwB,CAAA,KAAA;MAAA,IAE5BpB,MAF4B,GAMxB,IANwB,CAE5BA,MAF4B;;MAO5B,MAAA,QAAA,CAAc,UAAA,KAAA,EAAuB;QAAtB,IAAEkD,aAAF,GAAsB,KAAtB,CAAEA,aAAF;QACb,IAAMI,cAAc,GAAGJ,aAAa,CAACpB,KAAK,CAA1C,GAAoC,CAApC;;QAEA,IAAIwB,cAAc,KAAlB,MAAA,EAA+B;UAC7B,OAAA,IAAA;QACD;;QAED,OAAO;UACLJ,aAAa,kCAAE,aAAF,4BAEVpB,KAAK,CAAN,GAFW,EAEE9B,MAFF;QADR,CAAP;MAPF,CAAA;IAjDwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,iBAAA,EAiEA,YAAM;MAC9B,IAAQoB,KAAR,GAAkB,MAAlB,KAAA,CAAQA,KAAR;MAEA,OAAOA,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAzB,KAAOA,CAAP;IApEwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,kBAAA,EAuEC,UAAA,KAAA,EAAyC;MAAxC,IAAEU,KAAF,GAAwC,KAAxC,CAAEA,KAAF;MAC1B,IAAQyB,gBAAR,GAA6B,MAA7B,KAAA,CAAQA,gBAAR;MACA,IAAQzE,MAAR,GAAmB,MAAnB,KAAA,CAAQA,MAAR;MAEA,IAAM2C,aAAa,GAAG8B,gBAAgB,CAAC;QAAEzB,KAAAA,EAAAA;MAAF,CAAD,CAAtC;;MAEA,IAAA,aAAA,EAAmB;QACjB,IAAM0B,aAAa,GAAG1E,MAAM,CAANA,IAAAA,CACnBM,UAAAA,KAAD;UAAA,OAAWA,KAAK,CAALA,UAAAA,CAAAA,KAAAA,CAAAA,GAAAA,KAA+BqC,aAAa,CADzD,GACE;QAAA,CADoB3C,CAAtB;QAIA,OAAA,aAAA;MACD;;MAED,OAAA,SAAA;IArFwB,CAAA,CAAA;;IAGxB,MAAA,KAAA,GAAa;MACXkE,MAAM,EADK,EAAA;MAEXlE,MAAM,EAFK,EAAA;MAGXuC,QAAQ,EAHG,EAAA;MAIXP,MAAM,EAAEsC,sBAAsB,CAAtBA,cAAAA,CAJG,KAAA;MAKXH,WAAW,EAAE,MAAA,KAAA,CALF,WAAA;MAWXC,aAAa,EAAE;IAXJ,CAAb;IAHwB;EAgBzB;;;;WAwEDO,kBAAS;MAAA;;MACP,kBAmBI,KAnBJ,KAAA;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,KAAN,eAAM,KAAN;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,gBAAN,eAAM,gBAAN;MAAA,IAAM,WAAN,eAAM,WAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,WAAN,eAAM,WAAN;MAAA,IAAM,mBAAN,eAAM,mBAAN;MAAA,IAAM,aAAN,eAAM,aAAN;MAAA,IAAM,iBAAN,eAAM,iBAAN;MAAA,IAAM,eAAN,eAAM,eAAN;MAAA,IAAM,cAAN,eAAM,cAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,eAAN,eAAM,eAAN;MAAA,wCAgBEC,qBAhBF;MAAA,IAgBEA,qBAhBF,sCAgB0BrB,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACtBA,QAAQ,CAARA,EAAAA,KADsBA,SAAAA,IAEtBA,QAAQ,CAARA,EAAAA,KAAgB,KAlBpB;MAqBA,kBAAoD,KAApD,KAAA;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,QAAN,eAAM,QAAN;MAAA,IAAkCa,aAAlC,eAAkCA,aAAlC;MAEA,IAAMS,YAAY,GAAGvC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB;MACA,IAAMwC,mBAAmB,GAAGV,aAAa,CAACS,YAAY,CAAtD,GAAyC,CAAzC;MAEA,IAAME,qBAAqB,GAAG,KAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAwB,CAAxB,CAAA,EAAA,IAAA,CAAkCzE,UAAAA,KAAD,EAAW;QAAA,IAAA,qBAAA;;QACxE,IAAMT,OAAO,GAAA,CAAA,qBAAA,GAAGS,KAAK,CAALA,UAAAA,CAAH,OAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAb,EAAA;QACA,IAAM,UAAN,GAAA,OAAA,CAAM,UAAN;QAAA,IAAM,iBAAN,GAAA,OAAA,CAAM,iBAAN;QAAA,2BAAA,OAAA,CAAuC0E,WAAvC;QAAA,IAAuCA,WAAvC,qCAAqD,IAArD;;QAEA,IACEC,iBAAiB,IACjBD,WAAW,KADXC,KAAAA,IAEArB,UAAU,KAHZ,QAAA,EAIE;UACA,OAAA,IAAA;QACD;;QAED,OAAA,KAAA;MAZF,CAA8B,CAA9B;MAeA,IAAIsB,kBAAkB,GAAtB,CAAA;;MAEA,KAAK,IAAIhF,CAAC,GAAGF,MAAM,CAANA,MAAAA,GAAb,CAAA,EAAgCE,CAAC,IAAjC,CAAA,EAAwCA,CAAxC,EAAA,EAA6C;QAC3C,IAAQL,OAAR,GAAoBG,MAAM,CAANA,CAAM,CAANA,CAApB,UAAA,CAAQH,OAAR;QACA,4BAAA,OAAA,CAEEsF,oBAFF;QAAA,IAEEA,oBAFF,sCAEyBtF,OAAO,CAAPA,YAAAA,KAAAA,kBAAAA,GAAAA,KAAAA,GAEnBW,sBAAsB,CAACX,OAAO,CAA9BW,qBAAsB,CAAtBA,GACAN,CAAC,KACDF,MAAM,CAANA,GAAAA,CACQM,UAAAA,KAAD;UAAA,OAAWA,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CADlBN,qBACO;QAAA,CADPA,EAAAA,WAAAA,CAFAQ,uBAEAR,CAFAQ,GAKA,IATN;;QAYA,IAAI2E,oBAAoB,KAAxB,KAAA,EAAoC;UAClCD,kBAAkB;QADpB,CAAA,MAEO;UAIL,IAAIhF,CAAC,IAAIF,MAAM,CAANA,MAAAA,GAAT,CAAA,EAA4B;YAC1B;UACD;QACF;MACF;;MAED,IAAMoF,cAAc,GAClB,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA;QAAgB,GAAG,EAAC;MAApB,CAAA,EACGC,YAAY,CAAC;QACZC,IAAI,EADQ,OAAA;QAEZtD,MAFY,EAEZA,MAFY;QAGZhC,MAHY,EAGZA,MAHY;QAIZuF,gBAAgB,EAAE,KAJN,gBAAA;QAKZC,eAAe,EAAE,KALL,eAAA;QAMZC,qBAAqB,EAAE,KANX,kBAAA;QAOZzE,KAAK,EAAE,CACL0E,MAAM,CADD,QAAA,EAELX,qBAAqB,IAAI,CAEvB;UAAE7D,MAAM,EAAE4D;QAAV,CAFuB,EAGvBY,MAAM,CALH,QAEoB,CAFpB;MAPK,CAAD,CADf,CADF;MAqBA,OACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EACGX,qBAAqB,GAAA,IAAA,GADxB,cAAA,EAEE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;QACE,OAAO,EADT,qBAAA;QAEE,KAAK,EAAEW,MAAM,CAFf,SAAA;QAGE,QAAQ,EAAE,KAAKC;MAHjB,CAAA,EAKG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAwB;QAAA,IAAA,OAAA,EAAA,QAAA;;QAClC,IAAMC,OAAO,GAAGf,YAAY,CAAZA,GAAAA,KAAqB7B,KAAK,CAA1C,GAAA;QACA,IAAM6C,OAAO,GAAGtD,QAAQ,CAACS,KAAK,CAA9B,GAAwB,CAAxB;QACA,IAAM1C,KAAK,GAAGN,MAAM,CAHc,KAGd,CAApB;QAMA,IAAI8F,cAA0D,GAA9D,CAAA;;QAEA,IAAI3F,KAAK,GAAGyC,IAAI,CAAJA,MAAAA,GAAAA,kBAAAA,GAAZ,CAAA,EAAkD;UAEhDkD,cAAc,GAAdA,cAAAA;QAFF,CAAA,MAGO;UACL,IAAMC,gBAAgB,GAAG/F,MAAM,CAAC4C,IAAI,CAAJA,MAAAA,GAAhC,CAA+B,CAA/B;UACA,IAAMoD,WAAW,GACf,KAAK,KAAKpD,IAAI,CAAJA,MAAAA,GAAV,CAAA,GAAA,YAAA,GAEI,KAAK,IAAIA,IAAI,CAAJA,MAAAA,GAAT,kBAAA,GAAA,gCAAA,GALD,cAEL;UAMAkD,cAAc,GAAGC,gBAAgB,GAC7B,gBAAgB,CAAhB,QAAA,CAAA,OAAA,CAAA,WAAA,CAA8C;YAC5C9D,UAAU,EAAE,CAAA,CAAA,EAAI,IAAJ,OAAA,EADgC,CAChC,CADgC;YAE5CC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAF+B,WAE/B,CAF+B;YAG5C+D,WAAW,EAAE;UAH+B,CAA9C,CAD6B,GAAjCH,gCAAAA;QAOD;;QAED,6BAKIxF,KAAK,CAALA,UAAAA,CALJ,OAAA;QAAA,oDACE0E,WADF;QAAA,IACEA,WADF,uCAAM,IAAN;QAAA,IAAM,iBAAN,0BAAM,iBAAN;QAAA,IAAM,WAAN,0BAAM,WAAN;QAAA,IAIEkB,eAJF,0BAIEA,eAJF;QAOA,IAAMC,gBAAgB,GAAGtF,MAAM,CAA/B,GAAA;QACA,IAAMuF,kBAAkB,GAAGvF,MAAM,CAAjC,KAAA;QACA,IAAMwF,mBAAmB,GAAGxF,MAAM,CAAlC,MAAA;QACA,IAAMyF,iBAAiB,GAAGzF,MAAM,CAAhC,IAAA;QAEA,IAAM0F,YAAY,GAChBvB,WAAW,KAAXA,KAAAA,GAAwBZ,aAAa,CAACpB,KAAK,CAA3CgC,GAAqC,CAArCA,GADF,CAAA;QAGA,IAAA,iBAAA;;QAEA,IAAA,WAAA,EAAiB;UACf,IAAI,OAAA,eAAA,KAAJ,QAAA,EAAyC;YACvCwB,iBAAiB,GAAGC,KAAK,CAALA,eAAK,CAALA,CAApBD,MAAoBC,EAApBD;UADF,CAAA,MAEO;YACL,IAAME,oBAAoB,GAAGzF,UAAU,CAAVA,OAAAA,CAA7B,WAA6BA,CAA7B;;YAEA,IACEyF,oBAAoB,IACpB,qBADAA,oBAAAA,IAEA,OAAOA,oBAAoB,CAA3B,eAAA,KAHF,QAAA,EAIE;cACAF,iBAAiB,GAAG,CAACC,KAAK,CACxBC,oBAAoB,CADDD,eAAK,CAALA,CAArBD,MAAqBC,EAArBD;YAGD;UACF;QA/D+B;;QAmElC,IAAMvG,kBAAkB,GAAGH,qBAAqB,CAAA,MAAA,EAAhD,KAAgD,CAAhD;QACA,IAAMW,OAAO,GAAGJ,UAAU,CAAA,KAAA,EAAA,kBAAA,EAA1B,aAA0B,CAA1B;QAMA,IAAMsG,uBAAuB,GAC3B,CAAA,CAAA,OAAA,GAAA,MAAM,CAACxG,KAAK,GAAZ,CAAM,CAAN,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,YAAA,MADF,kBAAA;QAIA,IAAMyG,mBAAmB,GACvB,CAAA,CAAA,QAAA,GAAA,MAAM,CAACzG,KAAK,GAAZ,CAAM,CAAN,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,UAAA,CAAA,OAAA,CAAA,oBAAA,MADF,KAAA;QAIA,OACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;UACE,GAAG,EAAE6C,KAAK,CADZ,GAAA;UAEE,KAAK,EAAE/B,UAAU,CAFnB,YAAA;UAGE,OAAO,EAHT,qBAAA;UAIE,MAAM,EAJR,cAAA;UAKE,aAAa,EAAC;QALhB,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;UACE,KAAK,EADP,KAAA;UAEE,kBAAkB,EAFpB,kBAAA;UAGE,KAAK,EAHP,OAAA;UAIE,MAAM,EAAEd,KAAK,KAAKyC,IAAI,CAAJA,MAAAA,GAJpB,CAAA;UAKE,OAAO,EALT,OAAA;UAME,OAAO,EAAEiE,gBAAgB,CAAhBA,QAAAA,CAA0B7D,KAAK,CAN1C,GAMW6D,CANX;UAOE,MAAM,EAPR,MAAA;UAQE,OAAO,EART,OAAA;UASE,KAAK,EATP,KAAA;UAUE,gBAAgB,EAVlB,gBAAA;UAWE,kBAAkB,EAXpB,kBAAA;UAYE,mBAAmB,EAZrB,mBAAA;UAaE,iBAAiB,EAbnB,iBAAA;UAcE,cAAc,EAdhB,cAAA;UAeE,eAAe,EAfjB,eAAA;UAgBE,YAAY,EAhBd,YAAA;UAiBE,YAAY,EAjBd,YAAA;UAkBE,mBAAmB,EAlBrB,mBAAA;UAmBE,oBAAoB,EAAE,MAAA,CAnBxB,kBAAA;UAoBE,gBAAgB,EAAE,MAAA,CApBpB,gBAAA;UAqBE,eAAe,EAAE,MAAA,CArBnB,eAAA;UAsBE,iBAAiB,EAtBnB,iBAAA;UAuBE,sBAAsB,EACpB9B,qBAAqB,IAAI,CAxB7B,iBAAA;UA0BE,YAAY,EA1Bd,YAAA;UA2BE,WAAW,EA3Bb,WAAA;UA4BE,WAAW,EA5Bb,WAAA;UA6BE,YAAY,EA7Bd,YAAA;UA8BE,iBAAiB,EA9BnB,iBAAA;UA+BE,eAAe,EA/BjB,eAAA;UAgCE,uBAAuB,EAhCzB,uBAAA;UAiCE,mBAAmB,EAAE6B;QAjCvB,CAAA,CAPF,CADF;MAzFN,CAOK,CALH,CAFF,EAwIG7B,qBAAqB,GAAA,cAAA,GAzI1B,IACE,CADF;IA4ID;;;WAnfM3C,kCAAwB,KAAxBA,EAAwB,KAAxBA,EAGkB;MACvB,IACEC,KAAK,CAALA,MAAAA,KAAiBC,KAAK,CAAtBD,MAAAA,IACAA,KAAK,CAALA,WAAAA,KAAsBC,KAAK,CAF7B,WAAA,EAGE;QACA,OAAA,IAAA;MACD;;MAED,IAAMC,QAAQ,GAAG,KAAK,CAAL,MAAA,CAAA,MAAA,CAAmC,UAAA,GAAA,EAAA,IAAA,EAAe;QACjE,IAAMC,UAAU,GAAGH,KAAK,CAALA,WAAAA,CAAkBtB,IAAI,CAAzC,GAAmBsB,CAAnB;;QACA,YAA6B,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,OAAA,KAA7B,EAAA;QAAA,IAAQI,gBAAR,SAAQA,gBAAR;;QAEArB,GAAG,CAACL,IAAI,CAARK,GAAG,CAAHA,GACEkB,KAAK,CAALA,QAAAA,CAAevB,IAAI,CAAnBuB,GAAAA,KACA,IAAII,QAAQ,CAAZ,KAAA,CACEL,KAAK,CAALA,gBAAAA,CAAAA,QAAAA,CAAgCtB,IAAI,CAApCsB,GAAAA,KACAI,gBAAgB,KADhBJ,KAAAA,GAEIf,sBAAsB,CAACgB,KAAK,CAAN,MAAA,EAF1BD,UAE0B,CAF1BA,GAHJjB,CAEE,CAFFA;QASA,OAAA,GAAA;MAbe,CAAA,EAAjB,EAAiB,CAAjB;MAgBA,IAAMpB,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAwB;QAAA,IAAA,qBAAA;;QACtD,IAAM2C,aAAa,GAAGC,IAAI,CAACzC,KAAK,GAAhC,CAA0B,CAA1B;QACA,IAAM0C,SAAS,GAAGD,IAAI,CAACzC,KAAK,GAA5B,CAAsB,CAAtB;QAEA,IAAM2C,QAAQ,GAAGR,KAAK,CAALA,MAAAA,CAAjB,KAAiBA,CAAjB;QAEA,IAAMS,cAAc,GAAGR,QAAQ,CAACS,KAAK,CAArC,GAA+B,CAA/B;QACA,IAAMC,eAAe,GAAGN,aAAa,GACjCJ,QAAQ,CAACI,aAAa,CADW,GACzB,CADyB,GAArC,SAAA;QAGA,IAAMO,WAAW,GAAGL,SAAS,GAAGN,QAAQ,CAACM,SAAS,CAArB,GAAW,CAAX,GAA7B,SAAA;QAEA,IAAML,UAAU,GACdH,KAAK,CAALA,WAAAA,CAAkBW,KAAK,CAAvBX,GAAAA,KACAC,KAAK,CAALA,WAAAA,CAAkBU,KAAK,CADvBX,GACAC,CADAD,KAECS,QAAQ,GAAGA,QAAQ,CAAX,UAAA,GAHX,mBACET,CADF;QAKA,IAAMc,cAAc,GAClBd,KAAK,CAALA,WAAAA,CAAkBQ,SAAlBR,KAAAA,IAAkBQ,IAAAA,SAAlBR,KAAAA,KAAAA,CAAkBQ,GAAlBR,KAAAA,CAAkBQ,GAAAA,SAAS,CAA3BR,GAAAA,KAAqCC,KAAK,CAALA,WAAAA,CAAkBO,SAAlBP,KAAAA,IAAkBO,IAAAA,SAAlBP,KAAAA,KAAAA,CAAkBO,GAAlBP,KAAAA,CAAkBO,GAAAA,SAAS,CADlE,GACuCP,CADvC;QAGA,IAAMc,kBAAkB,GACtBf,KAAK,CAALA,WAAAA,CAAkBM,aAAlBN,KAAAA,IAAkBM,IAAAA,aAAlBN,KAAAA,KAAAA,CAAkBM,GAAlBN,KAAAA,CAAkBM,GAAAA,aAAa,CAA/BN,GAAAA,KACAC,KAAK,CAALA,WAAAA,CAAkBK,aAAlBL,KAAAA,IAAkBK,IAAAA,aAAlBL,KAAAA,KAAAA,CAAkBK,GAAlBL,KAAAA,CAAkBK,GAAAA,aAAa,CAtBqB,GAsBpDL,CAFF;QAUA,IAAMe,0BAA0B,GAC9BlD,KAAK,KAAKyC,IAAI,CAAJA,MAAAA,GAAVzC,CAAAA,IAAAA,cAAAA,IAEAgD,cAAc,CAAdA,OAAAA,CAAAA,YAAAA,KAFAhD,kBAAAA,GAGIgD,cAAc,CAHlBhD,OAAAA,GAIIqC,UAAU,CALhB,OAAA;QAOA,IAAIc,uBAAuB,GACzBD,0BAA0B,CAA1BA,YAAAA,KAAAA,OAAAA,GAAAA,eAAAA,GAEIA,0BAA0B,CAA1BA,YAAAA,KAAAA,kBAAAA,GAAAA,mBAAAA,GAHN,iBAAA;QAOA,4BAAA,0BAAA,CACEZ,gBADF;QAAA,IACEA,gBADF,sCACqBc,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACjBA,QAAQ,CAARA,EAAAA,KADiBA,SAAAA,IAEjBA,QAAQ,CAARA,EAAAA,KAHE,OAAN;QAAA,6BAAA,0BAAA,CAIEC,cAJF;QAAA,IAIEA,cAJF,uCAImBD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAJb,gBAAN;QAAA,6BAAA,0BAAA,CAKEhC,gBALF;QAAA,IAKEA,gBALF,uCAKqB+B,uBAAuB,CALtC,gBAAN;QAAA,6BAAA,0BAAA,CAMEG,cANF;QAAA,IAMEA,cANF,uCAMmBH,uBAAuB,CANpC,cAAN;QAAA,6BAAA,0BAAA,CAOEvD,qBAPF;QAAA,IAOEA,qBAPF,uCAO0B0C,gBAAgB,KAAhBA,KAAAA,GAAAA,kBAAAA,GAEpBa,uBAAuB,CATvB,qBAAN;QAAA,6BAAA,0BAAA,CAUEI,uBAVF;QAAA,IAUEA,uBAVF,uCAU4BJ,uBAAuB,CAV7C,uBAAN;QAAA,6BAAA,0BAAA,CAWEK,kBAXF;QAAA,IAWEA,kBAXF,uCAWwBJ,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACpBF,0BAA0B,CAA1BA,YAAAA,KADmB,kBAACE,IAEpB/C,sBAAsB,CAAA,qBAAA,CAb1B;QAgBA,IAAMoD,UAA2B,GAAA,CAAA,qBAAA,GAC/BpB,UAAU,CAAVA,OAAAA,CAD+B,UAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAE9B,EACCa,0BAA0B,CAA1BA,YAAAA,KAAAA,OAAAA,IACAA,0BAA0B,CAA1BA,YAAAA,KADAA,kBAAAA,IAEA,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,OAAA,CAAA,YAAA,MAFAA,OAAAA,IAGA,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,OAAA,CAAA,YAAA,MAHAA,kBAAAA,IAIA7C,sBAAsB,CALvB,qBAKuB,CALvB,KAOD+C,QAAQ,CAARA,EAAAA,KAPC,KAAA,IAQDf,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,KARC,SAAA,GAAA,OAAA,GAFH,QAAA;QAcA,IAAMlC,KAAK,GAAG;UACZ0C,KADY,EACZA,KADY;UAEZR,UAAU,kCAAE,UAAF;YAER3C,OAAO,kCACF2C,UAAU,CADN,OAAF;cAELC,gBAFO,EAEPA,gBAFK;cAGLkB,kBAHO,EAGPA,kBAHK;cAIL5D,qBAJO,EAIPA,qBAJK;cAKLwB,gBALO,EAKPA,gBALK;cAMLiC,cANO,EAMPA,cANK;cAOLE,uBAPO,EAOPA,uBAPK;cAQLD,cARO,EAQPA,cARK;cASLG,UAAAA,EAAAA;YATK;UAFC,EAFE;UAgBZC,QAAQ,EAAE;YACRC,OAAO,EAAElC,sBAAsB,CAAA,cAAA,EAE7BU,KAAK,CAFwB,MAAA,EADvB,UACuB,CADvB;YAMRyB,IAAI,EACFb,WAAW,IACX,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,OAAA,CAAA,YAAA,MADAA,kBAAAA,GAEItB,sBAAsB,CAAA,WAAA,EAEpBU,KAAK,CAFe,MAAA,EAF1BY,cAE0B,CAF1BA,GAPM,SAAA;YAeR/B,QAAQ,EAAE8B,eAAe,GACrBrB,sBAAsB,CAAA,eAAA,EAEpBU,KAAK,CAFe,MAAA,EADD,kBACC,CADD,GAMrB0B;UArBI,CAhBE;UAuCZC,MAAM,EAAE,CACN3B,KAAK,CADC,MAAA,EAAA,UAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,WAAA,EAAA,eAAA;QAvCI,CAAd;;QAkDA,IACEQ,QAAQ,IACR,KAAK,CAAL,MAAA,CAAA,KAAA,CAAmB,UAAA,EAAA,EAAA,CAAA,EAAW;UAE5B,OAAOA,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,MAAP,EAAA;QAJJ,CAEE,CAFF,EAME;UACA,OAAA,QAAA;QACD;;QAED,OAAA,KAAA;MAtIF,CAAe,CAAf;MAyIA,OAAO;QACLoB,MAAM,EAAE7B,KAAK,CADR,MAAA;QAELrC,MAFK,EAELA,MAFK;QAGLuC,QAHK,EAGLA,QAHK;QAIL4B,WAAW,EAAE9B,KAAK,CAJb,WAAA;QAKL+B,aAAa,EAAE1D,gBAAgB,CAAA,MAAA,EAE7B2B,KAAK,CAFwB,MAAA,EAG7BA,KAAK,CAHwB,mBAAA,EAI7BA,KAAK,CAJwB,aAAA,EAK7BC,KAAK,CALwB,MAAA,EAM7BA,KAAK,CANwB,aAAA;MAL1B,CAAP;IAcD;;;;EAnLoCH,KAAK,CAA7B,S;;SAAA,S;AAuff,IAAMuD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BoB,SAAS,EAAE;IACTC,IAAI,EAAE;EADG,CADoB;EAI/BC,QAAQ,EAAE;IACRC,QAAQ,EADA,UAAA;IAERC,GAAG,EAFK,CAAA;IAGRC,IAAI,EAHI,CAAA;IAIRC,KAAK,EAAE;EAJC,CAJqB;EAU/BC,QAAQ,EAAE;IACRC,MAAM,EAAE;EADA;AAVqB,CAAlB,CAAf","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}