{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n\n  var dark = _ref.dark,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      darkTheme = _useTheme.dark;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      overlapping = _React$useState2[0],\n      setOverlapping = _React$useState2[1];\n\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark !== null && dark !== void 0 ? dark : !darkTheme;\n  return React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["style","dark","darkTheme","useTheme","React","scale","layout","offset","insets","flattenedStyle","StyleSheet","translateY","s","listener","value","setOverlapping","sub","darkContent","overlapping"],"mappings":";AAAA,SAAA,QAAA,QAAA,0BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAaA,eAAe,SAAA,qBAAA,CAAA,IAAA,EAKL;EAAA,IAAA,qBAAA,EAAA,sBAAA;;EALoC,IAAA,IAAA,GAKpC,IALoC,CAAA,IAAA;EAAA,IAAA,MAAA,GAKpC,IALoC,CAAA,MAAA;EAAA,IAAA,MAAA,GAKpC,IALoC,CAAA,MAAA;EAAA,IAI5CA,KAJ4C,GAKpC,IALoC,CAI5CA,KAJ4C;;EAM5C,gBAA4BG,QAA5B,EAAA;EAAA,IAAcD,SAAd,aAAQD,IAAR;;EACA,sBAAsCG,KAAK,CAALA,QAAAA,CAAtC,IAAsCA,CAAtC;EAAA;EAAA,IAAM,WAAN;EAAA,IAAM,cAAN;;EAEA,IAAMC,KAAK,GAAG,IAAI,KAAKC,MAAM,CAA7B,KAAA;EACA,IAAMC,MAAM,GAAG,CAACC,MAAM,CAANA,GAAAA,GAAD,EAAA,IAAf,KAAA;EAEA,IAAMC,cAAc,GAAGC,UAAU,CAAVA,OAAAA,CAAvB,KAAuBA,CAAvB;EACA,IAAMC,UAAU,GAAGF,cAAH,KAAA,IAAGA,IAAAA,cAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,qBAAA,GAAGA,cAAc,CAAjB,SAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAGA,qBAAAA,CAAAA,IAAAA,CAChBG,UAAAA,CAAD;IAAA,OAAYA,CAAC,CAADA,UAAAA,KADE,SACd;EAAA,CADiBH,CAAH,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAAnB,UAAA;EAIAL,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAkC;MAAjC,IAAEC,KAAF,GAAiC,KAAjC,CAAEA,KAAF;MAChBC,cAAc,CAACD,KAAK,GAApBC,MAAc,CAAdA;IADF,CAAA;;IAIA,IAAMC,GAAG,GAAGL,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAVA,WAAAA,CAAZ,QAAYA,CAAZ;IAEA,OAAO;MAAA,OAAMA,UAAN,KAAA,IAAMA,IAAAA,UAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,UAAU,CAAVA,cAAAA,CAAb,GAAaA,CAAN;IAAA,CAAP;EAPFP,CAAAA,EAQG,CAAA,MAAA,EARHA,UAQG,CARHA;EAUA,IAAMa,WAAW,GAAGhB,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,IAAGA,GAAQ,CAA5B,SAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;IACE,QAAQ,EADV,IAAA;IAEE,QAAQ,EAAEiB,WAAW,IAAXA,WAAAA,GAAAA,cAAAA,GAA8C;EAF1D,CAAA,CADF;AAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}