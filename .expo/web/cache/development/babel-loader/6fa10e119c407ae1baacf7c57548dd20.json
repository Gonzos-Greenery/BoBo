{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"descriptors\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport CardStack from \"./CardStack\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    _this = _super.apply(this, arguments);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref) {\n      var route = _ref.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref2) {\n      var route = _ref2.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref3) {\n      var route = _ref3.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref5, closing) {\n      var route = _ref5.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function (_ref7) {\n      var route = _ref7.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function (_ref8) {\n      var route = _ref8.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function (_ref9) {\n      var route = _ref9.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          _ = _this$props3.descriptors,\n          rest = _objectWithoutProperties(_this$props3, _excluded);\n\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n        return React.createElement(ModalPresentationContext.Consumer, null, function (isParentModal) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              isParentModal: isParentModal,\n              getPreviousRoute: _this2.getPreviousRoute,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest));\n          });\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref10) {\n          var key = _ref10.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","isArrayEqual","a","b","it","React","getDerivedStateFromProps","props","state","r","routes","previousRoutes","descriptors","previousDescriptors","acc","route","map","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","key","descriptor","getAnimationTypeForReplace","openingRouteKeys","closingRouteKeys","replacingRouteKeys","index","navigation","StackActions","source","target","type","data","closing","render","rest","styles","container","insets","isParentModal","isParentHeaderShown","handleGestureCancel","flex"],"mappings":"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","sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}