{"version":3,"file":"bundle.umd.js","sources":["../src/restLink.ts"],"sourcesContent":["import {\n  OperationTypeNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  // Query Nodes\n  DirectiveNode,\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from '@apollo/client/core';\nimport {\n  hasDirectives,\n  getMainDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  addTypenameToDocument,\n  FragmentMap,\n  isField,\n  isInlineFragment,\n  resultKeyNameFromField,\n  checkDocument,\n  removeDirectivesFromDocument,\n} from '@apollo/client/utilities';\n\nimport { graphql } from 'graphql-anywhere/lib/async';\nimport { Resolver, ExecInfo } from 'graphql-anywhere';\n\nimport * as qs from 'qs';\n\nexport namespace RestLink {\n  export type URI = string;\n\n  export type Endpoint = string;\n\n  export interface EndpointOptions {\n    uri: Endpoint;\n    responseTransformer?: ResponseTransformer | null;\n  }\n\n  export interface Endpoints {\n    [endpointKey: string]: Endpoint | EndpointOptions;\n  }\n\n  export type Header = string;\n  export interface HeadersHash {\n    [headerKey: string]: Header;\n  }\n  export type InitializationHeaders = HeadersHash | Headers | string[][];\n\n  export type HeadersMergePolicy = (...headerGroups: Headers[]) => Headers;\n\n  export interface FieldNameNormalizer {\n    (fieldName: string, keypath?: string[]): string;\n  }\n\n  export interface TypePatcherContext {\n    resolverParams: {\n      fieldName: string;\n      root: any;\n      args: any;\n      context: RequestContext;\n      info: ExecInfo;\n    };\n  }\n\n  /** injects __typename using user-supplied code */\n  export interface FunctionalTypePatcher {\n    (\n      data: any,\n      outerType: string,\n      patchDeeper: FunctionalTypePatcher,\n      context: TypePatcherContext,\n    ): any;\n  }\n  /** Table of mappers that help inject __typename per type described therein */\n  export interface TypePatcherTable {\n    [typename: string]: FunctionalTypePatcher;\n  }\n\n  export interface SerializedBody {\n    body: any;\n    headers: InitializationHeaders;\n  }\n\n  export interface Serializer {\n    (data: any, headers: Headers): SerializedBody;\n  }\n\n  export interface Serializers {\n    [bodySerializer: string]: Serializer;\n  }\n\n  export type CustomFetch = (\n    request: RequestInfo,\n    init: RequestInit,\n  ) => Promise<Response>;\n\n  export type ResponseTransformer = (data: any, typeName: string) => any;\n\n  export interface RestLinkHelperProps {\n    /** Arguments passed in via normal graphql parameters */\n    args: { [key: string]: any };\n    /** Arguments added via @export(as: ) directives */\n    exportVariables: { [key: string]: any };\n    /** Arguments passed directly to @rest(params: ) */\n    // params: { [key: string]: any };\n    /** Apollo Context */\n    context: { [key: string]: any };\n    /** All arguments passed to the `@rest(...)` directive */\n    '@rest': { [key: string]: any };\n  }\n  export interface PathBuilderProps extends RestLinkHelperProps {\n    replacer: (opts: RestLinkHelperProps) => string;\n  }\n\n  /**\n   * Used for any Error from the server when requests:\n   * - terminate with HTTP Status >= 300\n   * - and the response contains no data or errors\n   */\n  export type ServerError = Error & {\n    response: Response;\n    result: any;\n    statusCode: number;\n  };\n\n  export type Options = {\n    /**\n     * The URI to use when fetching operations.\n     *\n     * Optional if endpoints provides a default.\n     */\n    uri?: URI;\n\n    /**\n     * A root endpoint (uri) to apply paths to or a map of endpoints.\n     */\n    endpoints?: Endpoints;\n\n    /**\n     * An object representing values to be sent as headers on the request.\n     */\n    headers?: InitializationHeaders;\n\n    /**\n     * A function that takes the response field name and converts it into a GraphQL compliant name\n     *\n     * @note This is called *before* @see typePatcher so that it happens after\n     *       optional-field-null-insertion.\n     */\n    fieldNameNormalizer?: FieldNameNormalizer;\n\n    /**\n     * A function that takes a GraphQL-compliant field name and converts it back into an endpoint-specific name\n     * Can be overridden at the mutation-call-site (in the rest-directive).\n     */\n    fieldNameDenormalizer?: FieldNameNormalizer;\n\n    /**\n     * Structure to allow you to specify the __typename when you have nested objects in your REST response!\n     *\n     * If you want to force Required Properties, you can throw an error in your patcher,\n     *  or `delete` a field from the data response provided to your typePatcher function!\n     *\n     * @note: This is called *after* @see fieldNameNormalizer because that happens\n     *        after optional-nulls insertion, and those would clobber normalized names.\n     *\n     * @warning: We're not thrilled with this API, and would love a better alternative before we get to 1.0.0\n     *           Please see proposals considered in https://github.com/apollographql/apollo-link-rest/issues/48\n     *           And consider submitting alternate solutions to the problem!\n     */\n    typePatcher?: TypePatcherTable;\n\n    /**\n     * The credentials policy you want to use for the fetch call.\n     */\n    credentials?: 'omit' | 'same-origin' | 'include';\n\n    /**\n     * Use a custom fetch to handle REST calls.\n     */\n    customFetch?: CustomFetch;\n\n    /**\n     * Add serializers that will serialize the body before it is emitted and will pass on\n     * headers to update the request.\n     */\n    bodySerializers?: Serializers;\n\n    /**\n     * Set the default serializer for the link\n     * @default JSON serialization\n     */\n    defaultSerializer?: Serializer;\n\n    /**\n     * Parse the response body of an HTTP request into the format that Apollo expects.\n     */\n    responseTransformer?: ResponseTransformer;\n  };\n\n  /** @rest(...) Directive Options */\n  export interface DirectiveOptions {\n    /**\n     * What HTTP method to use.\n     * @default `GET`\n     */\n    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n    /** What GraphQL type to name the response */\n    type?: string;\n    /**\n     * What path (including query) to use\n     * - @optional if you provide @see DirectiveOptions.pathBuilder\n     */\n    path?: string;\n    /**\n     * What endpoint to select from the map of endpoints available to this link.\n     * @default `RestLink.endpoints[DEFAULT_ENDPOINT_KEY]`\n     */\n    endpoint?: string;\n    /**\n     * Function that constructs a request path out of the Environmental\n     *  state when processing this @rest(...) call.\n     *\n     * - @optional if you provide: @see DirectiveOptions.path\n     * - **note**: providing this function means it's your responsibility to call\n     *             encodeURIComponent directly if needed!\n     *\n     * Warning: This is an Advanced API and we are looking for syntactic & ergonomics feedback.\n     */\n    pathBuilder?: (props: PathBuilderProps) => string;\n    /**\n     * Optional method that constructs a RequestBody out of the Environmental state\n     * when processing this @rest(...) call.\n     * @default function that extracts the bodyKey from the args.\n     *\n     * Warning: This is an Advanced API and we are looking for syntactic & ergonomics feedback.\n     */\n    bodyBuilder?: (props: RestLinkHelperProps) => object;\n    /**\n     * Optional field that defines the name of the env var to extract and use as the body\n     * @default \"input\"\n     * @see https://dev-blog.apollodata.com/designing-graphql-mutations-e09de826ed97\n     */\n    bodyKey?: string;\n\n    /**\n     * Optional serialization function or a key that will be used look up the serializer to serialize the request body before transport.\n     * @default if null will fallback to the default serializer\n     */\n    bodySerializer?: RestLink.Serializer | string;\n\n    /**\n     * A per-request name denormalizer, this permits special endpoints to have their\n     * field names remapped differently from the default.\n     * @default Uses RestLink.fieldNameDenormalizer\n     */\n    fieldNameDenormalizer?: RestLink.FieldNameNormalizer;\n    /**\n     * A per-request name normalizer, this permits special endpoints to have their\n     * field names remapped differently from the default.\n     * @default Uses RestLink.fieldNameDenormalizer\n     */\n    fieldNameNormalizer?: RestLink.FieldNameNormalizer;\n    /**\n     * A method to allow insertion of __typename deep in response objects\n     */\n    typePatcher?: RestLink.FunctionalTypePatcher;\n  }\n}\n\nconst popOneSetOfArrayBracketsFromTypeName = (typename: string): string => {\n  const noSpace = typename.replace(/\\s/g, '');\n  const sansOneBracketPair = noSpace.replace(\n    /\\[(.*)\\]/,\n    (str, matchStr, offset, fullStr) => {\n      return (\n        ((matchStr != null && matchStr.length) > 0 ? matchStr : null) || noSpace\n      );\n    },\n  );\n  return sansOneBracketPair;\n};\n\nconst addTypeNameToResult = (\n  result: any[] | object,\n  __typename: string,\n  typePatcher: RestLink.FunctionalTypePatcher,\n  typePatcherContext: RestLink.TypePatcherContext,\n): any[] | object => {\n  if (Array.isArray(result)) {\n    const fixedTypename = popOneSetOfArrayBracketsFromTypeName(__typename);\n    // Recursion needed for multi-dimensional arrays\n    return result.map(e =>\n      addTypeNameToResult(e, fixedTypename, typePatcher, typePatcherContext),\n    );\n  }\n  if (\n    null == result ||\n    typeof result === 'number' ||\n    typeof result === 'boolean' ||\n    typeof result === 'string'\n  ) {\n    return result;\n  }\n  return typePatcher(result, __typename, typePatcher, typePatcherContext);\n};\n\nconst quickFindRestDirective = (field: FieldNode): DirectiveNode | null => {\n  if (field.directives && field.directives.length) {\n    return field.directives.find(directive => 'rest' === directive.name.value);\n  }\n  return null;\n};\n/**\n * The way graphql works today, it doesn't hand us the AST tree for our query, it hands us the ROOT\n * This method searches for REST-directive-attached nodes that are named to match this query.\n *\n * A little bit of wasted compute, but alternative would be a patch in graphql-anywhere.\n *\n * @param resultKey SearchKey for REST directive-attached item matching this sub-query\n * @param current current node in the REST-JSON-response\n * @param mainDefinition Parsed Query Definition\n * @param fragmentMap Map of Named Fragments\n * @param currentSelectionSet Current selection set we're filtering by\n */\nfunction findRestDirectivesThenInsertNullsForOmittedFields(\n  resultKey: string,\n  current: any[] | object, // currentSelectionSet starts at root, so wait until we're inside a Field tagged with an @rest directive to activate!\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n  currentSelectionSet: SelectionSetNode,\n): any[] | object {\n  if (\n    currentSelectionSet == null ||\n    null == current ||\n    typeof current === 'number' ||\n    typeof current === 'boolean' ||\n    typeof current === 'string'\n  ) {\n    return current;\n  }\n  currentSelectionSet.selections.forEach(node => {\n    if (isInlineFragment(node)) {\n      findRestDirectivesThenInsertNullsForOmittedFields(\n        resultKey,\n        current,\n        mainDefinition,\n        fragmentMap,\n        node.selectionSet,\n      );\n    } else if (node.kind === 'FragmentSpread') {\n      const fragment = fragmentMap[node.name.value];\n      findRestDirectivesThenInsertNullsForOmittedFields(\n        resultKey,\n        current,\n        mainDefinition,\n        fragmentMap,\n        fragment.selectionSet,\n      );\n    } else if (isField(node)) {\n      const name = resultKeyNameFromField(node);\n      if (name === resultKey && quickFindRestDirective(node) != null) {\n        // Jackpot! We found our selectionSet!\n        insertNullsForAnyOmittedFields(\n          current,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      } else {\n        findRestDirectivesThenInsertNullsForOmittedFields(\n          resultKey,\n          current,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      }\n    } else {\n      // This will give a TypeScript build-time error if you did something wrong or the AST changes!\n      return ((node: never): never => {\n        throw new Error('Unhandled Node Type in SelectionSetNode.selections');\n      })(node);\n    }\n  });\n  // Return current to have our result pass to next link in async promise chain!\n  return current;\n}\n/**\n * Recursively walks a handed object in parallel with the Query SelectionSet,\n *  and inserts `null` for any field that is missing from the response.\n *\n * This is needed because ApolloClient will throw an error automatically if it's\n *  missing -- effectively making all of rest-link's selections implicitly non-optional.\n *\n * If you want to implement required fields, you need to use typePatcher to *delete*\n *  fields when they're null and you want the query to fail instead.\n *\n * @param current Current object we're patching\n * @param mainDefinition Parsed Query Definition\n * @param fragmentMap Map of Named Fragments\n * @param currentSelectionSet Current selection set we're filtering by\n */\nfunction insertNullsForAnyOmittedFields(\n  current: any[] | object, // currentSelectionSet starts at root, so wait until we're inside a Field tagged with an @rest directive to activate!\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n  currentSelectionSet: SelectionSetNode,\n): void {\n  if (\n    null == current ||\n    typeof current === 'number' ||\n    typeof current === 'boolean' ||\n    typeof current === 'string'\n  ) {\n    return;\n  }\n  if (Array.isArray(current)) {\n    // If our current value is an array, process our selection set for each entry.\n    current.forEach(c =>\n      insertNullsForAnyOmittedFields(\n        c,\n        mainDefinition,\n        fragmentMap,\n        currentSelectionSet,\n      ),\n    );\n    return;\n  }\n  currentSelectionSet.selections.forEach(node => {\n    if (isInlineFragment(node)) {\n      insertNullsForAnyOmittedFields(\n        current,\n        mainDefinition,\n        fragmentMap,\n        node.selectionSet,\n      );\n    } else if (node.kind === 'FragmentSpread') {\n      const fragment = fragmentMap[node.name.value];\n      insertNullsForAnyOmittedFields(\n        current,\n        mainDefinition,\n        fragmentMap,\n        fragment.selectionSet,\n      );\n    } else if (isField(node)) {\n      const value = current[node.name.value];\n      if (node.name.value === '__typename') {\n        // Don't mess with special fields like __typename\n      } else if (typeof value === 'undefined') {\n        // Patch in a null where the field would have been marked as missing\n        current[node.name.value] = null;\n      } else if (\n        value != null &&\n        typeof value === 'object' &&\n        node.selectionSet != null\n      ) {\n        insertNullsForAnyOmittedFields(\n          value,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      } else {\n        // Other types (string, number) do not need recursive patching!\n      }\n    } else {\n      // This will give a TypeScript build-time error if you did something wrong or the AST changes!\n      return ((node: never): never => {\n        throw new Error('Unhandled Node Type in SelectionSetNode.selections');\n      })(node);\n    }\n  });\n}\n\nconst getEndpointOptions = (\n  endpoints: RestLink.Endpoints,\n  endpoint: RestLink.Endpoint,\n): RestLink.EndpointOptions => {\n  const result =\n    endpoints[endpoint || DEFAULT_ENDPOINT_KEY] ||\n    endpoints[DEFAULT_ENDPOINT_KEY];\n\n  if (typeof result === 'string') {\n    return { uri: result };\n  }\n\n  return {\n    responseTransformer: null,\n    ...result,\n  };\n};\n\n/** Replaces params in the path, keyed by colons */\nconst replaceLegacyParam = (\n  endpoint: string,\n  name: string,\n  value: string,\n): string => {\n  if (value === undefined || name === undefined) {\n    return endpoint;\n  }\n  return endpoint.replace(`:${name}`, value);\n};\n\n/** Internal Tool that Parses Paths for RestLink -- This API should be considered experimental */\nexport class PathBuilder {\n  /** For accelerating the replacement of paths that are used a lot */\n  private static cache: {\n    [path: string]: (props: RestLink.PathBuilderProps) => string;\n  } = {};\n  /** Table to limit the amount of nagging (due to probable API Misuse) we do to once per path per launch */\n  private static warnTable: { [key: string]: true } = {};\n  /** Regexp that finds things that are eligible for variable replacement */\n  private static argReplacement = /({[._a-zA-Z0-9]*})/;\n\n  static replacerForPath(\n    path: string,\n  ): (props: RestLink.PathBuilderProps) => string {\n    if (path in PathBuilder.cache) {\n      return PathBuilder.cache[path];\n    }\n\n    const queryOrigStartIndex = path.indexOf('?');\n    const pathBits = path.split(PathBuilder.argReplacement);\n\n    const chunkActions: Array<\n      | true // We're enabling the qs-encoder\n      | string // This is a raw string bit, don't mess with it\n      | ((props: RestLink.RestLinkHelperProps, useQSEncoder: boolean) => string)\n    > = [];\n\n    let hasBegunQuery = false;\n    pathBits.reduce((processedCount, bit) => {\n      if (bit === '' || bit === '{}') {\n        // Empty chunk, do nothing\n        return processedCount + bit.length;\n      }\n      const nextIndex = processedCount + bit.length;\n      if (bit[0] === '{' && bit[bit.length - 1] === '}') {\n        // Replace some args!\n        const _keyPath = bit.slice(1, bit.length - 1).split('.');\n\n        chunkActions.push(\n          (props: RestLink.RestLinkHelperProps, useQSEncoder: boolean) => {\n            try {\n              const value = PathBuilderLookupValue(props, _keyPath);\n              if (\n                !useQSEncoder ||\n                (typeof value !== 'object' || value == null)\n              ) {\n                return String(value);\n              } else {\n                return qs.stringify(value);\n              }\n            } catch (e) {\n              const key = [path, _keyPath.join('.')].join('|');\n              if (!(key in PathBuilder.warnTable)) {\n                console.warn(\n                  'Warning: RestLink caught an error while unpacking',\n                  key,\n                  \"This tends to happen if you forgot to pass a parameter needed for creating an @rest(path, or if RestLink was configured to deeply unpack a path parameter that wasn't provided. This message will only log once per detected instance. Trouble-shooting hint: check @rest(path: and the variables provided to this query.\",\n                );\n                PathBuilder.warnTable[key] = true;\n              }\n              return '';\n            }\n          },\n        );\n      } else {\n        chunkActions.push(bit);\n        if (!hasBegunQuery && nextIndex >= queryOrigStartIndex) {\n          hasBegunQuery = true;\n          chunkActions.push(true);\n        }\n      }\n      return nextIndex;\n    }, 0);\n\n    const result: (props: RestLink.PathBuilderProps) => string = props => {\n      let hasEnteredQuery = false;\n      const tmp = chunkActions.reduce((accumulator: string, action): string => {\n        if (typeof action === 'string') {\n          return accumulator + action;\n        } else if (typeof action === 'boolean') {\n          hasEnteredQuery = true;\n          return accumulator;\n        } else {\n          return accumulator + action(props, hasEnteredQuery);\n        }\n      }, '') as string;\n      return tmp;\n    };\n    return (PathBuilder.cache[path] = result);\n  }\n}\n\n/** Private Helper Function */\nfunction PathBuilderLookupValue(tmp: object, keyPath: string[]) {\n  if (keyPath.length === 0) {\n    return tmp;\n  }\n  const remainingKeyPath = [...keyPath]; // Copy before mutating\n  const key = remainingKeyPath.shift();\n  return PathBuilderLookupValue(tmp[key], remainingKeyPath);\n}\n\n/**\n * Some keys should be passed through transparently without normalizing/de-normalizing\n */\nconst noMangleKeys = ['__typename'];\n\n/** Trivial globalThis polyfill that falls-back to our previous global object in case people had polyfilled that */\nconst globalScope = (typeof globalThis === 'object' && globalThis) || global;\n\n/** Recursively descends the provided object tree and converts all the keys */\nconst convertObjectKeys = (\n  object: object,\n  __converter: RestLink.FieldNameNormalizer,\n  keypath: string[] = [],\n): object => {\n  let converter: RestLink.FieldNameNormalizer = null;\n  if (__converter.length != 2) {\n    converter = (name, keypath) => {\n      return __converter(name);\n    };\n  } else {\n    converter = __converter;\n  }\n\n  if (Array.isArray(object)) {\n    return object.map((o, index) =>\n      convertObjectKeys(o, converter, [...keypath, String(index)]),\n    );\n  }\n\n  if (\n    object == null ||\n    typeof object !== 'object' ||\n    object.constructor !== Object\n  ) {\n    // Object is a scalar or null / undefined => no keys to convert!\n    return object;\n  }\n\n  // FileList/File are only available in some browser contexts\n  // Notably: *not available* in react-native.\n  if (\n    ((globalScope as any).FileList && object instanceof FileList) ||\n    ((globalScope as any).File && object instanceof File)\n  ) {\n    // Object is a FileList or File object => no keys to convert!\n    return object;\n  }\n\n  return Object.keys(object).reduce((acc: any, key: string) => {\n    let value = object[key];\n\n    if (noMangleKeys.indexOf(key) !== -1) {\n      acc[key] = value;\n      return acc;\n    }\n\n    const nestedKeyPath = [...keypath, key];\n    acc[converter(key, nestedKeyPath)] = convertObjectKeys(\n      value,\n      converter,\n      nestedKeyPath,\n    );\n    return acc;\n  }, {});\n};\n\nconst noOpNameNormalizer: RestLink.FieldNameNormalizer = (name: string) => {\n  return name;\n};\n\n/**\n * Helper that makes sure our headers are of the right type to pass to Fetch\n */\nexport const normalizeHeaders = (\n  headers: RestLink.InitializationHeaders,\n): Headers => {\n  // Make sure that our headers object is of the right type\n  if (headers instanceof Headers) {\n    return headers;\n  } else {\n    return new Headers(headers || {});\n  }\n};\n\n/**\n * Returns a new Headers Group that contains all the headers.\n * - If there are duplicates, they will be in the returned header set multiple times!\n */\nexport const concatHeadersMergePolicy: RestLink.HeadersMergePolicy = (\n  ...headerGroups: Headers[]\n): Headers => {\n  return headerGroups.reduce((accumulator, current) => {\n    if (!current) {\n      return accumulator;\n    }\n    if (!current.forEach) {\n      current = normalizeHeaders(current);\n    }\n    current.forEach((value, key) => {\n      accumulator.append(key, value);\n    });\n\n    return accumulator;\n  }, new Headers());\n};\n\n/**\n * This merge policy deletes any matching headers from the link's default headers.\n * - Pass headersToOverride array & a headers arg to context and this policy will automatically be selected.\n */\nexport const overrideHeadersMergePolicy = (\n  linkHeaders: Headers,\n  headersToOverride: string[],\n  requestHeaders: Headers | null,\n): Headers => {\n  const result = new Headers();\n  linkHeaders.forEach((value, key) => {\n    if (headersToOverride.indexOf(key) !== -1) {\n      return;\n    }\n    result.append(key, value);\n  });\n  return concatHeadersMergePolicy(result, requestHeaders || new Headers());\n};\nexport const overrideHeadersMergePolicyHelper = overrideHeadersMergePolicy; // Deprecated name\n\nconst makeOverrideHeadersMergePolicy = (\n  headersToOverride: string[],\n): RestLink.HeadersMergePolicy => {\n  return (linkHeaders, requestHeaders) => {\n    return overrideHeadersMergePolicy(\n      linkHeaders,\n      headersToOverride,\n      requestHeaders,\n    );\n  };\n};\n\nconst SUPPORTED_HTTP_VERBS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];\n\nexport const validateRequestMethodForOperationType = (\n  method: string,\n  operationType: OperationTypeNode,\n): void => {\n  switch (operationType) {\n    case 'query':\n      if (SUPPORTED_HTTP_VERBS.indexOf(method.toUpperCase()) !== -1) {\n        return;\n      }\n      throw new Error(\n        `A \"query\" operation can only support \"GET\" requests but got \"${method}\".`,\n      );\n    case 'mutation':\n      if (SUPPORTED_HTTP_VERBS.indexOf(method.toUpperCase()) !== -1) {\n        return;\n      }\n      throw new Error('\"mutation\" operations do not support that HTTP-verb');\n    case 'subscription':\n      throw new Error('A \"subscription\" operation is not supported yet.');\n    default:\n      const _exhaustiveCheck: never = operationType;\n      return _exhaustiveCheck;\n  }\n};\n\n/**\n * Utility to build & throw a JS Error from a \"failed\" REST-response\n * @param response: HTTP Response object for this request\n * @param result: Promise that will render the body of the response\n * @param message: Human-facing error message\n */\nconst rethrowServerSideError = (\n  response: Response,\n  result: any,\n  message: string,\n) => {\n  const error = new Error(message) as RestLink.ServerError;\n\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n\n  throw error;\n};\n\n/** Apollo-Link getContext, provided from the user & mutated by upstream links */\ninterface LinkChainContext {\n  /** Credentials Policy for Fetch */\n  credentials?: RequestCredentials | null;\n\n  /** Headers the user wants to set on this request. See also headersMergePolicy */\n  headers?: RestLink.InitializationHeaders | null;\n\n  /** Will default to concatHeadersMergePolicy unless headersToOverride is set */\n  headersMergePolicy?: RestLink.HeadersMergePolicy | null;\n\n  /** List of headers to override, passing this will swap headersMergePolicy if necessary */\n  headersToOverride?: string[] | null;\n\n  /** An array of the responses from each fetched URL, useful for accessing headers in earlier links */\n  restResponses?: Response[];\n}\n\n/** Context passed via graphql() to our resolver */\ninterface RequestContext {\n  /** Headers the user wants to set on this request. See also headersMergePolicy */\n  headers: Headers;\n\n  /** Credentials Policy for Fetch */\n  credentials?: RequestCredentials | null;\n\n  /** Exported variables fulfilled in this request, using @export(as:). They are stored keyed by node to support deeply nested structures with exports at multiple levels */\n  exportVariablesByNode: Map<any, { [key: string]: any }>;\n\n  endpoints: RestLink.Endpoints;\n  customFetch: RestLink.CustomFetch;\n  operationType: OperationTypeNode;\n  fieldNameNormalizer: RestLink.FieldNameNormalizer;\n  fieldNameDenormalizer: RestLink.FieldNameNormalizer;\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode;\n  fragmentDefinitions: FragmentDefinitionNode[];\n  typePatcher: RestLink.FunctionalTypePatcher;\n  serializers: RestLink.Serializers;\n  responseTransformer: RestLink.ResponseTransformer;\n\n  /** An array of the responses from each fetched URL */\n  responses: Response[];\n}\n\nconst addTypeToNode = (node, typename) => {\n  if (node === null || node === undefined || typeof node !== 'object') {\n    return node;\n  }\n\n  if (!Array.isArray(node)) {\n    node['__typename'] = typename;\n    return node;\n  }\n\n  return node.map(item => {\n    return addTypeToNode(item, typename);\n  });\n};\n\nconst resolver: Resolver = async (\n  fieldName: string,\n  root: any,\n  args: any,\n  context: RequestContext,\n  info: ExecInfo,\n) => {\n  const { directives, isLeaf, resultKey } = info;\n  const { exportVariablesByNode } = context;\n\n  const exportVariables = exportVariablesByNode.get(root) || {};\n\n  /** creates a copy of this node's export variables for its child nodes. iterates over array results to provide for each child. returns the passed result. */\n  const copyExportVariables = <T>(result: T): T => {\n    if (result instanceof Array) {\n      result.forEach(copyExportVariables);\n    } else {\n      // export variables are stored keyed on the node they are for\n      exportVariablesByNode.set(result, { ...exportVariables });\n    }\n\n    return result;\n  };\n\n  // Support GraphQL Aliases!\n  const aliasedNode = (root || {})[resultKey];\n  const preAliasingNode = (root || {})[fieldName];\n\n  if (root && directives && directives.export) {\n    // @export(as:) is only supported with apollo-link-rest at this time\n    // so use the preAliasingNode as we're responsible for implementing aliasing!\n    exportVariables[directives.export.as] = preAliasingNode;\n  }\n\n  const isATypeCall = directives && directives.type;\n\n  if (!isLeaf && isATypeCall) {\n    // @type(name: ) is only supported inside apollo-link-rest at this time\n    // so use the preAliasingNode as we're responsible for implementing aliasing!\n    // Also: exit early, since @type(name: ) && @rest() can't both exist on the same node.\n    if (directives.rest) {\n      throw new Error(\n        'Invalid use of @type(name: ...) directive on a call that also has @rest(...)',\n      );\n    }\n    copyExportVariables(preAliasingNode);\n    return addTypeToNode(preAliasingNode, directives.type.name);\n  }\n\n  const isNotARestCall = !directives || !directives.rest;\n  if (isNotARestCall) {\n    // This is not tagged with @rest()\n    // This might not belong to us so return the aliasNode version preferentially\n    return copyExportVariables(aliasedNode || preAliasingNode);\n  }\n  const {\n    credentials,\n    endpoints,\n    headers,\n    customFetch,\n    operationType,\n    typePatcher,\n    mainDefinition,\n    fragmentDefinitions,\n    fieldNameNormalizer: linkLevelNameNormalizer,\n    fieldNameDenormalizer: linkLevelNameDenormalizer,\n    serializers,\n    responseTransformer,\n  } = context;\n\n  const fragmentMap = createFragmentMap(fragmentDefinitions);\n\n  let {\n    path,\n    endpoint,\n    pathBuilder,\n  } = directives.rest as RestLink.DirectiveOptions;\n\n  const endpointOption = getEndpointOptions(endpoints, endpoint);\n  const neitherPathsProvided = path == null && pathBuilder == null;\n\n  if (neitherPathsProvided) {\n    throw new Error(\n      `One of (\"path\" | \"pathBuilder\") must be set in the @rest() directive. This request had neither, please add one`,\n    );\n  }\n  if (!pathBuilder) {\n    if (!path.includes(':')) {\n      // Colons are the legacy route, and aren't uri encoded anyhow.\n      pathBuilder = PathBuilder.replacerForPath(path);\n    } else {\n      console.warn(\n        \"Deprecated: '@rest(path:' contains a ':' colon, this format will be removed in future versions\",\n      );\n\n      pathBuilder = ({\n        args,\n        exportVariables,\n      }: RestLink.PathBuilderProps): string => {\n        const legacyArgs = {\n          ...args,\n          ...exportVariables,\n        };\n        const pathWithParams = Object.keys(legacyArgs).reduce(\n          (acc, e) => replaceLegacyParam(acc, e, legacyArgs[e]),\n          path,\n        );\n        if (pathWithParams.includes(':')) {\n          throw new Error(\n            'Missing parameters to run query, specify it in the query params or use ' +\n              'an export directive. (If you need to use \":\" inside a variable string' +\n              ' make sure to encode the variables properly using `encodeURIComponent' +\n              '`. Alternatively see documentation about using pathBuilder.)',\n          );\n        }\n        return pathWithParams;\n      };\n    }\n  }\n  const allParams: RestLink.PathBuilderProps = {\n    args,\n    exportVariables,\n    context,\n    '@rest': directives.rest,\n    replacer: pathBuilder,\n  };\n  const pathWithParams = pathBuilder(allParams);\n\n  let {\n    method,\n    type,\n    bodyBuilder,\n    bodyKey,\n    fieldNameDenormalizer: perRequestNameDenormalizer,\n    fieldNameNormalizer: perRequestNameNormalizer,\n    bodySerializer,\n  } = directives.rest as RestLink.DirectiveOptions;\n  if (!method) {\n    method = 'GET';\n  }\n  if (!bodyKey) {\n    bodyKey = 'input';\n  }\n\n  let body = undefined;\n  let overrideHeaders: Headers = undefined;\n  if (-1 === ['GET', 'DELETE'].indexOf(method)) {\n    // Prepare our body!\n    if (!bodyBuilder) {\n      // By convention GraphQL recommends mutations having a single argument named \"input\"\n      // https://dev-blog.apollodata.com/designing-graphql-mutations-e09de826ed97\n\n      const maybeBody =\n        allParams.exportVariables[bodyKey] ||\n        (allParams.args && allParams.args[bodyKey]);\n      if (!maybeBody) {\n        throw new Error(\n          `[GraphQL ${method} ${operationType} using a REST call without a body]. No \\`${bodyKey}\\` was detected. Pass bodyKey, or bodyBuilder to the @rest() directive to resolve this.`,\n        );\n      }\n\n      bodyBuilder = (argsWithExport: object) => {\n        return maybeBody;\n      };\n    }\n\n    body = convertObjectKeys(\n      bodyBuilder(allParams),\n      perRequestNameDenormalizer ||\n        linkLevelNameDenormalizer ||\n        noOpNameNormalizer,\n    );\n\n    let serializedBody: RestLink.SerializedBody;\n\n    if (typeof bodySerializer === 'string') {\n      if (!serializers.hasOwnProperty(bodySerializer)) {\n        throw new Error(\n          '\"bodySerializer\" must correspond to configured serializer. ' +\n            `Please make sure to specify a serializer called ${bodySerializer} in the \"bodySerializers\" property of the RestLink.`,\n        );\n      }\n      serializedBody = serializers[bodySerializer](body, headers);\n    } else {\n      serializedBody = bodySerializer\n        ? bodySerializer(body, headers)\n        : serializers[DEFAULT_SERIALIZER_KEY](body, headers);\n    }\n\n    body = serializedBody.body;\n    overrideHeaders = new Headers(serializedBody.headers);\n  }\n\n  validateRequestMethodForOperationType(method, operationType || 'query');\n\n  const requestParams = {\n    method,\n    headers: overrideHeaders || headers,\n    body: body,\n\n    // Only set credentials if they're non-null as some browsers throw an exception:\n    // https://github.com/apollographql/apollo-link-rest/issues/121#issuecomment-396049677\n    ...(credentials ? { credentials } : {}),\n  };\n  const requestUrl = `${endpointOption.uri}${pathWithParams}`;\n\n  const response = await (customFetch || fetch)(requestUrl, requestParams);\n  context.responses.push(response);\n\n  let result;\n  if (response.ok) {\n    if (\n      response.status === 204 ||\n      response.headers.get('Content-Length') === '0'\n    ) {\n      // HTTP-204 means \"no-content\", similarly Content-Length implies the same\n      // This commonly occurs when you POST/PUT to the server, and it acknowledges\n      // success, but doesn't return your Resource.\n      result = {};\n    } else {\n      result = response;\n    }\n  } else if (response.status === 404) {\n    // In a GraphQL context a missing resource should be indicated by\n    // a null value rather than throwing a network error\n    result = null;\n  } else {\n    // Default error handling:\n    // Throw a JSError, that will be available under the\n    // \"Network error\" category in apollo-link-error\n    let parsed: any;\n    // responses need to be cloned as they can only be read once\n    try {\n      parsed = await response.clone().json();\n    } catch (error) {\n      // its not json\n      parsed = await response.clone().text();\n    }\n    rethrowServerSideError(\n      response,\n      parsed,\n      `Response not successful: Received status code ${response.status}`,\n    );\n  }\n\n  const transformer = endpointOption.responseTransformer || responseTransformer;\n\n  if (transformer) {\n    // A responseTransformer might call something else than json() on the response.\n    try {\n      result = await transformer(result, type);\n    } catch (err) {\n      console.warn('An error occurred in a responseTransformer:');\n      throw err;\n    }\n  } else if (result && result.json) {\n    result = await result.json();\n  }\n\n  result = convertObjectKeys(\n    result,\n    perRequestNameNormalizer || linkLevelNameNormalizer || noOpNameNormalizer,\n  );\n\n  result = findRestDirectivesThenInsertNullsForOmittedFields(\n    resultKey,\n    result,\n    mainDefinition,\n    fragmentMap,\n    mainDefinition.selectionSet,\n  );\n\n  result = addTypeNameToResult(result, type, typePatcher, {\n    resolverParams: { fieldName, root, args, context, info },\n  });\n  return copyExportVariables(result);\n};\n\n/**\n * Default key to use when the @rest directive omits the \"endpoint\" parameter.\n */\nconst DEFAULT_ENDPOINT_KEY = '';\n\n/**\n * Default key to use when the @rest directive omits the \"bodySerializers\" parameter.\n */\nconst DEFAULT_SERIALIZER_KEY = '';\n\nconst DEFAULT_JSON_SERIALIZER: RestLink.Serializer = (\n  data: any,\n  headers: Headers,\n) => {\n  if (!headers.has('content-type')) {\n    headers.append('Content-Type', 'application/json');\n  }\n  return {\n    body: JSON.stringify(data),\n    headers: headers,\n  };\n};\n\nconst CONNECTION_REMOVE_CONFIG = {\n  test: (directive: DirectiveNode) => directive.name.value === 'rest',\n  remove: true,\n};\n\n/**\n * RestLink is an apollo-link for communicating with REST services using GraphQL on the client-side\n */\nexport class RestLink extends ApolloLink {\n  private readonly endpoints: RestLink.Endpoints;\n  private readonly headers: Headers;\n  private readonly fieldNameNormalizer: RestLink.FieldNameNormalizer;\n  private readonly fieldNameDenormalizer: RestLink.FieldNameNormalizer;\n  private readonly typePatcher: RestLink.FunctionalTypePatcher;\n  private readonly credentials: RequestCredentials;\n  private readonly customFetch: RestLink.CustomFetch;\n  private readonly serializers: RestLink.Serializers;\n  private readonly responseTransformer: RestLink.ResponseTransformer;\n  private readonly processedDocuments: Map<DocumentNode, DocumentNode>;\n\n  constructor({\n    uri,\n    endpoints,\n    headers,\n    fieldNameNormalizer,\n    fieldNameDenormalizer,\n    typePatcher,\n    customFetch,\n    credentials,\n    bodySerializers,\n    defaultSerializer,\n    responseTransformer,\n  }: RestLink.Options) {\n    super();\n    const fallback = {};\n    fallback[DEFAULT_ENDPOINT_KEY] = uri || '';\n    this.endpoints = Object.assign({}, endpoints || fallback);\n\n    if (uri == null && endpoints == null) {\n      throw new Error(\n        'A RestLink must be initialized with either 1 uri, or a map of keyed-endpoints',\n      );\n    }\n    if (uri != null) {\n      const currentDefaultURI = (endpoints || {})[DEFAULT_ENDPOINT_KEY];\n      if (currentDefaultURI != null && currentDefaultURI != uri) {\n        throw new Error(\n          \"RestLink was configured with a default uri that doesn't match what's passed in to the endpoints map.\",\n        );\n      }\n      this.endpoints[DEFAULT_ENDPOINT_KEY] = uri;\n    }\n\n    if (this.endpoints[DEFAULT_ENDPOINT_KEY] == null) {\n      console.warn(\n        'RestLink configured without a default URI. All @rest(…) directives must provide an endpoint key!',\n      );\n    }\n\n    if (typePatcher == null) {\n      this.typePatcher = (result, __typename, _2) => {\n        return { __typename, ...result };\n      };\n    } else if (\n      !Array.isArray(typePatcher) &&\n      typeof typePatcher === 'object' &&\n      Object.keys(typePatcher)\n        .map(key => typePatcher[key])\n        .reduce(\n          // Make sure all of the values are patcher-functions\n          (current, patcher) => current && typeof patcher === 'function',\n          true,\n        )\n    ) {\n      const table: RestLink.TypePatcherTable = typePatcher;\n      this.typePatcher = (\n        data: any,\n        outerType: string,\n        patchDeeper: RestLink.FunctionalTypePatcher,\n        context: RestLink.TypePatcherContext,\n      ) => {\n        const __typename = data.__typename || outerType;\n        if (Array.isArray(data)) {\n          return data.map(d =>\n            patchDeeper(d, __typename, patchDeeper, context),\n          );\n        }\n        const subPatcher = table[__typename] || (result => result);\n        return {\n          __typename,\n          ...subPatcher(data, __typename, patchDeeper, context),\n        };\n      };\n    } else {\n      throw new Error(\n        'RestLink was configured with a typePatcher of invalid type!',\n      );\n    }\n\n    if (\n      bodySerializers &&\n      bodySerializers.hasOwnProperty(DEFAULT_SERIALIZER_KEY)\n    ) {\n      console.warn(\n        'RestLink was configured to override the default serializer! This may result in unexpected behavior',\n      );\n    }\n\n    this.responseTransformer = responseTransformer || null;\n    this.fieldNameNormalizer = fieldNameNormalizer || null;\n    this.fieldNameDenormalizer = fieldNameDenormalizer || null;\n    this.headers = normalizeHeaders(headers);\n    this.credentials = credentials || null;\n    this.customFetch = customFetch;\n    this.serializers = {\n      [DEFAULT_SERIALIZER_KEY]: defaultSerializer || DEFAULT_JSON_SERIALIZER,\n      ...(bodySerializers || {}),\n    };\n    this.processedDocuments = new Map();\n  }\n\n  private removeRestSetsFromDocument(query: DocumentNode): DocumentNode {\n    const cached = this.processedDocuments.get(query);\n    if (cached) return cached;\n\n    checkDocument(query);\n\n    const docClone = removeDirectivesFromDocument(\n      [CONNECTION_REMOVE_CONFIG],\n      query,\n    );\n\n    this.processedDocuments.set(query, docClone);\n    return docClone;\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    const { query, variables, getContext, setContext } = operation;\n    const context: LinkChainContext | any = getContext() as any;\n    const isRestQuery = hasDirectives(['rest'], query);\n    if (!isRestQuery) {\n      return forward(operation);\n    }\n\n    const nonRest = this.removeRestSetsFromDocument(query);\n\n    // 1. Use the user's merge policy if any\n    let headersMergePolicy: RestLink.HeadersMergePolicy =\n      context.headersMergePolicy;\n    if (\n      headersMergePolicy == null &&\n      Array.isArray(context.headersToOverride)\n    ) {\n      // 2.a. Override just the passed in headers, if user provided that optional array\n      headersMergePolicy = makeOverrideHeadersMergePolicy(\n        context.headersToOverride,\n      );\n    } else if (headersMergePolicy == null) {\n      // 2.b Glue the link (default) headers to the request-context headers\n      headersMergePolicy = concatHeadersMergePolicy;\n    }\n\n    const headers = headersMergePolicy(this.headers, context.headers);\n    if (!headers.has('Accept')) {\n      // Since we assume a json body on successful responses set the Accept\n      // header accordingly if it is not provided by the user\n      headers.append('Accept', 'application/json');\n    }\n\n    const credentials: RequestCredentials =\n      context.credentials || this.credentials;\n\n    const queryWithTypename = addTypenameToDocument(query);\n\n    const mainDefinition = getMainDefinition(query);\n    const fragmentDefinitions = getFragmentDefinitions(query);\n\n    const operationType: OperationTypeNode =\n      (mainDefinition || ({} as any)).operation || 'query';\n\n    const requestContext: RequestContext = {\n      headers,\n      endpoints: this.endpoints,\n      // Provide an empty map for this request's exports to be stuffed into\n      exportVariablesByNode: new Map(),\n      credentials,\n      customFetch: this.customFetch,\n      operationType,\n      fieldNameNormalizer: this.fieldNameNormalizer,\n      fieldNameDenormalizer: this.fieldNameDenormalizer,\n      mainDefinition,\n      fragmentDefinitions,\n      typePatcher: this.typePatcher,\n      serializers: this.serializers,\n      responses: [],\n      responseTransformer: this.responseTransformer,\n    };\n    const resolverOptions = {};\n    let obs;\n    if (nonRest && forward) {\n      operation.query = nonRest;\n      obs = forward(operation);\n    } else obs = Observable.of({ data: {} });\n\n    return obs.flatMap(\n      ({ data, errors }) =>\n        new Observable(observer => {\n          graphql(\n            resolver,\n            queryWithTypename,\n            data,\n            requestContext,\n            variables,\n            resolverOptions,\n          )\n            .then(data => {\n              setContext({\n                restResponses: (context.restResponses || []).concat(\n                  requestContext.responses,\n                ),\n              });\n              observer.next({ data, errors });\n              observer.complete();\n            })\n            .catch(err => {\n              if (err.name === 'AbortError') return;\n              if (err.result && err.result.errors) {\n                observer.next(err.result);\n              }\n              observer.error(err);\n            });\n        }),\n    );\n  }\n}\n"],"names":["isInlineFragment","isField","resultKeyNameFromField","qs.stringify","createFragmentMap","checkDocument","removeDirectivesFromDocument","hasDirectives","addTypenameToDocument","getMainDefinition","getFragmentDefinitions","Observable","graphql","ApolloLink"],"mappings":"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"}